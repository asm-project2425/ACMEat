services:
  zeebe: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#zeebe
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
      - "8088:8080"
    environment: # https://docs.camunda.io/docs/self-managed/zeebe-deployment/configuration/environment-variables/
      # allow running with low disk space
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
      # default is 1000, see here: https://github.com/camunda/zeebe/blob/main/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchExporterConfiguration.java#L259
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
      - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
      - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
      - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    depends_on:
      - elasticsearch

  operate: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#operate
    image: camunda/operate:${CAMUNDA_OPERATE_VERSION}
    container_name: operate
    ports:
      - "8081:8080"
    environment: # https://docs.camunda.io/docs/self-managed/operate-deployment/configuration/
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_CSRFPREVENTIONENABLED=false
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
    healthcheck:
      test: [ "CMD-SHELL", "wget -O - -q 'http://localhost:9600/actuator/health/readiness'" ]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    depends_on:
      - zeebe
      - elasticsearch

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      # allow running with low disk space
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - elastic:/usr/share/elasticsearch/data

  gis:
    image: gis:latest
    build:
      context: ./GIS
    container_name: gis
    ports:
      - "6002:6002"

  restaurant1:
    build:
      context: ./Restaurant
    platform: linux/amd64 # for compatibility with arm64
    container_name: restaurant1
    volumes:
      - "./Restaurant/service/:/app/"
    ports:
      - "9001:80"

  bank_db:
    image: postgres:17
    restart: always
    container_name: bank_db
    environment:
      POSTGRES_DB: bankdb
      POSTGRES_USER: bankuser
      POSTGRES_PASSWORD: bankpassword
    ports:
      - "8001:5432"
    volumes:
      - ./Bank/backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata_bank:/var/lib/postgresql/data

  bank_backend:
    build:
      context: ./Bank/backend
    container_name: bank
    platform: linux/amd64 # for compatibility with arm64
    ports:
      - "8000:8000"
    depends_on:
      - bank_db

  acmeat_db:
    image: postgres:17
    restart: always
    container_name: acmeat_db
    environment:
      POSTGRES_DB: acmeatdb
      POSTGRES_USER: acmeuser
      POSTGRES_PASSWORD: acmepassword
    ports:
      - "5432:5432"
    volumes:
      - pgdata_acme:/var/lib/postgresql/data

  acmeat_backend:
    image: acmeat:latest
    build:
      context: ./ACMEat/backend
    container_name: acmeat
    ports:
      - "8080:8080"
    environment:
      - ACMEAT_DB_URL=jdbc:postgresql://acmeat_db:5432/acmeatdb
      - ZEEBE_GATEWAY_ADDRESS=http://zeebe:26500
      - RESTAURANT1_BASE_URL=http://restaurant1:80
      - GIS_BASE_URL=http://gis:6002
      - BANK_BASE_URL=http://bank:8000
      - SHIPPING_SERVICE1_BASE_URL=http://shipping_service1:9000 # update when shipping_service1 is added
    depends_on:
      - acmeat_db
      - operate # depends on Operate for monitoring
      - gis
      - restaurant1
      - bank_backend

  shipping_management:
    build:
      context: ./ShippingCompany/ShippingManagement
    environment:
      PGDATABASE: shippingcompanydb
      PGUSER: shippingcompanyuser
      PGPASSWORD: shippingcompanypassword
      PGHOST: shipping_company_db
    ports:
      - "5004:3000"
    container_name: shipping_management
    depends_on:
      - shipping_company_db
      - vehicle_assigner
      - vehicle_tracker
      - gis
      - acmeat_backend

  vehicle_assigner:
    build:
      context: ./ShippingCompany/VehicleAssigner
    environment:
      PGDATABASE: shippingcompanydb
      PGUSER: shippingcompanyuser
      PGPASSWORD: shippingcompanypassword
      PGHOST: shipping_company_db
    ports:
      - "5001:3000"
    container_name: vehicle_assigner
    depends_on:
      - shipping_company_db

  vehicle_tracker:
    build:
      context: ./ShippingCompany/VehicleTracker
    environment:
      PGDATABASE: shippingcompanydb
      PGUSER: shippingcompanyuser
      PGPASSWORD: shippingcompanypassword
      PGHOST: shipping_company_db
    ports:
      - "5002:3000"
    container_name: vehicle_tracker
    depends_on:
      - shipping_company_db

  shipping_company_db:
    image: postgres:17
    restart: always
    container_name: shipping_company_db
    environment:
      POSTGRES_DB: shippingcompanydb
      POSTGRES_USER: shippingcompanyuser
      POSTGRES_PASSWORD: shippingcompanypassword
    ports:
      - "5003:5432"
    volumes:
      - ./ShippingCompany/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata_shipping_company:/var/lib/postgresql/data

volumes:
  zeebe:
  elastic:
  pgdata_bank:
  pgdata_acme:
  pgdata_shipping_company: